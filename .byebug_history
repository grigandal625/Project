c
params[:competence_coverages]
competence_coverages
n
c
n
s
n
c
test_results[0].problem_areas.count
test_results[4].problem_areas.count
test_results[3].problem_areas.count
test_results[2].problem_areas.count
test_results[1].problem_areas.count
test_results[1].problem_areas
test_results.count
res.competence_coverages.count
res.problem_areas.count
res.problem_areas
exit
c
student['tests'].find{|test| test['text'] == ka_test}
student['tests'].find{|test| test['text'] = ka_test}
student['tests'].find{|test| test['text'] == ka_test}
student['tests'].find{|test| test['text'] == 'sdasd'}
student['tests'].find{|test| test['text'] = 1}
student['tests'].find
ka_test
c
pa_count
student['problem_areas'].delete_at(0)
student['problem_areas']
n
student['problem_areas']
n
c
e
n
student['problem_areas']
n
student['problem_areas']
c
с
kluster
c
@klaster_rows
c
@klaster_rows
c
n
@result_data.values
klaster_index
klaster
c
@klaster_rows.values[1]
@klaster_rows.values
@klaster_rows
n
kluster
c
result
marks.each { |k, v| result[k] = v.reduce(:+) / v.size }
n
marks
marks.each { |k, v| result[k] = v.reduce(:+) / v.size }
c
n
marks
c
row.first.to_i
c
students.where("fio LIKE '%#{row[1].split.first}%'").first
c
students.where("fio LIKE '#{row[1].split.first}'")
students.where("fio LIKE '#{row[1].split.first}%'")
students.where("fio LIKE '%#{row[1].split.first}%'")
row[1].split.first
row[1]
c
exception
n
row
c
n
row
c
n
row
n
row
n
c
row.first.to_i
row.first.to_i.in? (1..100)
2.in? (0..100)
(1..100).include? 0
(0..100).include? 0
(0..100).include? 3
(0..100)
1..20.include? 2
1..20.to_a
1..20
n
row
n
row
n
s
c
exception
n
c
File.open(params[:file].path).read
File.open(params[:file].path)
params[:file].path
File.open(params[:file])
params[:file]
c
params[:file].class
params[:file]
y_arr
y_arr.map{|el| puts el}
y_arr.map{|el| puts els}
y_arr.map{|el| el[1].push(0) if el[1].count < 4}
y_arr.map{|el| el[1].push(0) if el[1].count < 4}.to_h
y_arr.map{|el| el.push(0) if el.count < 4}.to_h
y_arr
y_arr[0]
y_arr.first
y_arr.map{|el| el.push(0) if el.count < 4}
y_arr
n
s
e
n
e
s
y_arr[e.fio]
n
y_arr[e.fio]
n
e
n
c
y_arr
n
y_arr
n
ka_results
y_arr
n
c
 KMeans.new([[0, 100, 100], [0, 17, 100], [0, 1, 1], [0, 52,0], [0, 48,0], [0, 34,0], [0, 74,0], [0, 95,0]], :centroids => 5)
 KMeans.new(y_arr.values.map(&:compact), :centroids => 5)
y_arr.values.map(&:compact)
y_arr
c
{}.blank?
{}.blank&
{} == false
Fbresult.where(group: group.number, fb: "Прямой")
group.students.first.user.ka_results.first
group.students.first.user.ka_results
group.students.first.user
group.students.first
group.students.map { |student| student.user.ka_results}
group = Group.find(group_id.first)
group_ka_results(group_id.first)
ka_results
y_arr
c
group = Group.find(group_id.first)
group = Group.find(group_id)
group = Group.find(group_id.first)
group = Group.find(group_id.first).students
group = Group.find(group_id.first)
group = Group.find(group_id)
group_ka_results(group_id)
group_id
ka_results
ka_resultska_results
ka_results
y_arr
